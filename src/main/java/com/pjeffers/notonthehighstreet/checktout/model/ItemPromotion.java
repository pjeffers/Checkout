package com.pjeffers.notonthehighstreet.checktout.model;

import com.pjeffers.notonthehighstreet.checktout.exception.ApplicationException;
import com.pjeffers.notonthehighstreet.checktout.utils.Utils;
import java.util.HashMap;

public class ItemPromotion extends BasePromotion implements Discount {

	private String triggerItemCode;		// the code of the item which must be bought to obtain the discount
	private int triggerItemCount;		// the number of such items which must be bought to obtain the discount
	private String targetItemCode;		// the item for which the discount is refunded


	public ItemPromotion(String[] parameters) throws Exception {
		super(parameters);

		String triggerNumberString= "";
		String percentageDiscountString="";

		try{
			//if parameter length < 6 then we will get an exception which will be caught and rethrown as an application
			// exception otherwise the parameters will be assigned
			this.triggerItemCode	= parameters[2].trim();
			triggerNumberString  	= parameters[3].trim();
			this.targetItemCode 	= parameters[4].trim();
			percentageDiscountString= parameters[5].trim();
			
			// check that none of the string fields are empty 
			if ((code.equals("")			||
			   (description.equals(""))		||
			   (triggerItemCode.equals(""))	||
			   (targetItemCode.equals(""))	||
			   (triggerNumberString.equals(""))	||
			   (percentageDiscountString.equals("")))){
				
				// throw an exception this will get caught and rethrown 
				throw new ApplicationException("Fields cannot be empty");
			}
			
		}catch(Exception e){
			
			if (Utils.isNullEmptyOrWhiteSpace(code)){
				
				throw new ApplicationException("Discount fields in the discount data file cannot be empty and there must be six entries. Check the discount data file.",e);
			}else{
				throw new ApplicationException("Fields in the discount data file cannot be empty for discount: "+ code+". Check the discount data file.",e);	
			}
				
		}
	
		// check that we have a valid trigger item count (number of items which must be bought).
		try{
			this.triggerItemCount = Integer.parseInt(triggerNumberString);
			if(this.triggerItemCount<=0){
				throw new Exception();
			}
		} 
		catch(Exception e){
			throw new ApplicationException("Invalid number \""+triggerNumberString+"\" for buy number for discount: "
		                           +this.code+". It must be a valid number greater than 0. Check the discount data file.", e);
		}
					

		try{
			this.percentageDiscount	= Double.parseDouble(percentageDiscountString);
			if(this.percentageDiscount<=0){
				throw new Exception("percentage discount cannot be negative");
			}
			} catch(Exception e){
			throw new ApplicationException("Invalid number \""+percentageDiscountString+"\" for percentage discount for discount: "
		                           +this.code+". It must be a valid number greater than 0. Check the discount data file", e);
		}		

	}


	/*
	 * calculate a generic parameterised discount of the form "buy n Trigger Items get 1 
	 * Target product item at a reduced price.
	 *
	 * Notes:
	 *  This method provides the flexibility to model most item related promotion discounts.
	 * 	The trigger and target items can be the same product.
	 *  The discount associated with this promotion can be applied multiple times dependant on the number of trigger
	 *  and target items in the shopping list. The maximum number of times it can be applied is limited by both the
	 *  number of trigger items and the number of target items (e.g. you can't have a discount if you have no
	 *  target items)
	 *
	 */
	public double calculateDiscount(HashMap<String, Item> allValidProducts,
									HashMap<String, Integer> itemCountSummary ){
	
		String buyItemCode=triggerItemCode; 		// code for the item which triggers the discount
		String discountedItemCode=targetItemCode; 	// code of the discounted item
		int maxNoDiscounts = 0;						// the maximum number of discounts that can be applied based on the 																
		double totalRefundForThisDiscount = 0.0;	// the total refund generated by the current discount
		
		// if we don't have both the trigger (buy) item and the discounted items in the item count summary then
		// there can be no discount so return a discount of zero (because we haven't bought both items).
		if(!(itemCountSummary.containsKey(discountedItemCode)&&
			 itemCountSummary.containsKey(buyItemCode))){
			
			return 0.0;	
		}
		
		// calculate the available number of discounts that can be applied for this promotion as
		// number of trigger items bought divided by the number of items required per discount
		int noTargetItemsBought		= itemCountSummary.get(discountedItemCode);
		int noTriggerItemsBought  	= itemCountSummary.get(buyItemCode);
		
		// the number of discounts generated by the trigger items we've bought will be 
		// number of trigger items / number of trigger items required for this discount
		int numberOfDiscountsAvailable = noTriggerItemsBought / triggerItemCount;
		
		// get the price for the target (discounted) item
		double itemPrice = allValidProducts.get(discountedItemCode).getPrice();
		
		// if the number of discounts available is >= 1 then we can apply a discount
		if(numberOfDiscountsAvailable >=1){
			
			// the maximum number of discounts we can apply is the smallest of the number of discounts available 
			// (generated by the trigger items) and the number of target items in the basket.
			//if we have less discounts available than target items then use the number of discounts available
			// otherwise discount only for the discounted items.
			if (numberOfDiscountsAvailable < noTargetItemsBought ){
				 maxNoDiscounts = numberOfDiscountsAvailable;
			} else {
				maxNoDiscounts = noTargetItemsBought;
			}
			
			//update the count on the item counter summary to reflect the remaining undiscounted target items left for this code.
			//these may be processed by another discount
			Integer count=itemCountSummary.get(discountedItemCode);
			count-=maxNoDiscounts;
			
			// if the count is 0 then remove the target item from the count so that it is not processed again.
			// otherwise store the new item count  
			if (count==0) {
				itemCountSummary.remove(discountedItemCode);
			}else{
				itemCountSummary.put(discountedItemCode, count);
			}
			
			// calculate the total refund for this discount and subtract it from the running total discount
			double discountPerTargetItem = (itemPrice*percentageDiscount/100);
			totalRefundForThisDiscount= discountPerTargetItem*maxNoDiscounts;


		}
		
		
		return totalRefundForThisDiscount;
	}

	public String getCode() {
		return code;
	}



	public String getDescription() {
		return description;
	}


	public String getTriggerItemCode() {
		return triggerItemCode;
	}


	public int getBuyNumber() {
		return triggerItemCount;
	}


	public String getTargetItemCode() {
		return targetItemCode;
	}


	public double getPercentageDiscount() {
		return percentageDiscount;
	}
}


